@page "/reset-password/{Token}"
@page "/reset-password/{Token}/{UserType}"
@using FinanceFlow.Shared.Models
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using BlazorServerApp.Components.Layout
@layout EmptyLayout

@inject HttpClient Http
@inject NavigationManager Navigation

<div class="register-page">
    <div class="register-card">
        <h2>Şifreyi Sıfırla</h2>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <EditForm EditContext="editContext"
                  OnValidSubmit="HandleValidSubmit"
                  OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />

            <!-- Yeni Şifre -->
            <div class="form-group">
                <label for="newPassword">Yeni Şifre</label>
                <div class="password-wrapper">
                    <InputText id="newPassword"
                               class="form-control"
                               type="@(_showPassword ? "text" : "password")"
                               @bind-Value="model.NewPassword"
                               placeholder="Yeni şifrenizi girin" />
                    <span class="toggle-password" @onclick="TogglePasswordVisibility">
                        <i class="@(_showPassword ? "fa fa-eye-slash" : "fa fa-eye")"></i>
                    </span>
                </div>
                <ValidationMessage For="@(() => model.NewPassword)" />
            </div>

            <!-- Şifre Onayı -->
            <div class="form-group">
                <label for="confirmPassword">Şifreyi Onayla</label>
                <div class="password-wrapper">
                    <InputText id="confirmPassword"
                               class="form-control"
                               type="@(_showConfirm ? "text" : "password")"
                               @bind-Value="model.ConfirmPassword"
                               placeholder="Şifrenizi tekrar girin" />
                    <span class="toggle-password" @onclick="ToggleConfirmVisibility">
                        <i class="@(_showConfirm ? "fa fa-eye-slash" : "fa fa-eye")"></i>
                    </span>
                </div>
                <ValidationMessage For="@(() => model.ConfirmPassword)" />
            </div>

            <div class="button-row">
                <button type="submit" class="btn-submit">Şifreyi Sıfırla</button>
                <button type="button"
                        class="btn-link"
                        @onclick="NavigateHome"
                @onclick:preventDefault>
                    Giriş Sayfasına Dön
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public string Token { get; set; } = "";
    [Parameter] public string UserType { get; set; } = "bireysel";

    // DTO'nuzda ConfirmPassword property'sinin tanımlı olduğundan emin olun:
    // public class ResetPasswordDTO { public string Token, NewPassword, ConfirmPassword; }

    private ResetPasswordModel model = new();
    private EditContext editContext;
    private ValidationMessageStore messageStore;
    private string? successMessage;
    private string? errorMessage;
    private bool _showPassword;
    private bool _showConfirm;

    protected override void OnInitialized()
    {
        model.Token = Token;
        editContext = new EditContext(model);
        messageStore = new ValidationMessageStore(editContext);
    }

    private void HandleInvalidSubmit(EditContext _)
    {
        successMessage = null;
        errorMessage = "Lütfen alanları doğru doldurun.";
    }

    private async Task HandleValidSubmit()
    {
        // Önce eşleşme kontrolü
        if (model.NewPassword != model.ConfirmPassword)
        {
            messageStore.Clear();
            messageStore.Add(editContext.Field(nameof(model.ConfirmPassword)), "Şifreler eşleşmiyor.");
            editContext.NotifyValidationStateChanged();
            return;
        }

        // Temizle
        successMessage = null;
        errorMessage = null;
        messageStore.Clear();
        editContext.NotifyValidationStateChanged();

        // API çağrısı
        var response = await Http.PostAsJsonAsync("api/auth/reset-password", model);
        var body = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            successMessage = "Şifreniz başarıyla güncellendi!";
            StateHasChanged();

            await Task.Delay(1500);
            NavigateHome();
        }
        else
        {
            errorMessage = body;
        }
    }

    private void TogglePasswordVisibility() =>
        _showPassword = !_showPassword;

    private void ToggleConfirmVisibility() =>
        _showConfirm = !_showConfirm;

    private void NavigateHome()
    {
        var target = UserType.Equals("kurumsal", StringComparison.OrdinalIgnoreCase)
            ? "/giris/kurumsal"
            : "/giris/bireysel";
        Navigation.NavigateTo(target);
    }
}
